// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	alarmclock "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/amt/alarmclock"
	boot "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/amt/boot"
	messagelog "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/amt/messagelog"
	boot0 "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/cim/boot"
	power "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/cim/power"
	software "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/cim/software"
	alarmclock0 "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/ips/alarmclock"
	optin "github.com/open-amt-cloud-toolkit/go-wsman-messages/v2/pkg/wsman/ips/optin"
)

// MockDomain is a mock of Domain interface.
type MockDomain struct {
	ctrl     *gomock.Controller
	recorder *MockDomainMockRecorder
}

// MockDomainMockRecorder is the mock recorder for MockDomain.
type MockDomainMockRecorder struct {
	mock *MockDomain
}

// NewMockDomain creates a new mock instance.
func NewMockDomain(ctrl *gomock.Controller) *MockDomain {
	mock := &MockDomain{ctrl: ctrl}
	mock.recorder = &MockDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomain) EXPECT() *MockDomainMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDomain) Delete(ctx context.Context, name, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainMockRecorder) Delete(ctx, name, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomain)(nil).Delete), ctx, name, tenantID)
}

// Get mocks base method.
func (m *MockDomain) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDomainMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomain)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockDomain) GetByName(ctx context.Context, name, tenantID string) (*entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, tenantID)
	ret0, _ := ret[0].(*entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDomainMockRecorder) GetByName(ctx, name, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDomain)(nil).GetByName), ctx, name, tenantID)
}

// GetCount mocks base method.
func (m *MockDomain) GetCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockDomainMockRecorder) GetCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockDomain)(nil).GetCount), arg0, arg1)
}

// GetDomainByDomainSuffix mocks base method.
func (m *MockDomain) GetDomainByDomainSuffix(ctx context.Context, domainSuffix, tenantID string) (*entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainByDomainSuffix", ctx, domainSuffix, tenantID)
	ret0, _ := ret[0].(*entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainByDomainSuffix indicates an expected call of GetDomainByDomainSuffix.
func (mr *MockDomainMockRecorder) GetDomainByDomainSuffix(ctx, domainSuffix, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainByDomainSuffix", reflect.TypeOf((*MockDomain)(nil).GetDomainByDomainSuffix), ctx, domainSuffix, tenantID)
}

// Insert mocks base method.
func (m *MockDomain) Insert(ctx context.Context, d *entity.Domain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDomainMockRecorder) Insert(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDomain)(nil).Insert), ctx, d)
}

// Update mocks base method.
func (m *MockDomain) Update(ctx context.Context, d *entity.Domain) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDomainMockRecorder) Update(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomain)(nil).Update), ctx, d)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDevice) Delete(ctx context.Context, guid, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, guid, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeviceMockRecorder) Delete(ctx, guid, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDevice)(nil).Delete), ctx, guid, tenantID)
}

// Get mocks base method.
func (m *MockDevice) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDevice)(nil).Get), ctx, top, skip, tenantID)
}

// GetByID mocks base method.
func (m *MockDevice) GetByID(ctx context.Context, guid, tenantID string) (entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, guid, tenantID)
	ret0, _ := ret[0].(entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDeviceMockRecorder) GetByID(ctx, guid, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDevice)(nil).GetByID), ctx, guid, tenantID)
}

// GetCount mocks base method.
func (m *MockDevice) GetCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockDeviceMockRecorder) GetCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockDevice)(nil).GetCount), arg0, arg1)
}

// Insert mocks base method.
func (m *MockDevice) Insert(ctx context.Context, d *entity.Device) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDeviceMockRecorder) Insert(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDevice)(nil).Insert), ctx, d)
}

// Update mocks base method.
func (m *MockDevice) Update(ctx context.Context, d *entity.Device) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceMockRecorder) Update(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDevice)(nil).Update), ctx, d)
}

// MockProfile is a mock of Profile interface.
type MockProfile struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMockRecorder
}

// MockProfileMockRecorder is the mock recorder for MockProfile.
type MockProfileMockRecorder struct {
	mock *MockProfile
}

// NewMockProfile creates a new mock instance.
func NewMockProfile(ctrl *gomock.Controller) *MockProfile {
	mock := &MockProfile{ctrl: ctrl}
	mock.recorder = &MockProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfile) EXPECT() *MockProfileMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProfile) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProfileMockRecorder) Delete(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfile)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockProfile) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProfileMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfile)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockProfile) GetByName(ctx context.Context, profileName, tenantID string) (entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProfileMockRecorder) GetByName(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProfile)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockProfile) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockProfileMockRecorder) GetCount(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockProfile)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockProfile) Insert(ctx context.Context, p *entity.Profile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProfileMockRecorder) Insert(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProfile)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockProfile) Update(ctx context.Context, p *entity.Profile) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfile)(nil).Update), ctx, p)
}

// MockDeviceManagement is a mock of DeviceManagement interface.
type MockDeviceManagement struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceManagementMockRecorder
}

// MockDeviceManagementMockRecorder is the mock recorder for MockDeviceManagement.
type MockDeviceManagementMockRecorder struct {
	mock *MockDeviceManagement
}

// NewMockDeviceManagement creates a new mock instance.
func NewMockDeviceManagement(ctrl *gomock.Controller) *MockDeviceManagement {
	mock := &MockDeviceManagement{ctrl: ctrl}
	mock.recorder = &MockDeviceManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceManagement) EXPECT() *MockDeviceManagementMockRecorder {
	return m.recorder
}

// CancelUserConsent mocks base method.
func (m *MockDeviceManagement) CancelUserConsent() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUserConsent")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUserConsent indicates an expected call of CancelUserConsent.
func (mr *MockDeviceManagementMockRecorder) CancelUserConsent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUserConsent", reflect.TypeOf((*MockDeviceManagement)(nil).CancelUserConsent))
}

// ChangeBootOrder mocks base method.
func (m *MockDeviceManagement) ChangeBootOrder(bootSource string) (boot0.ChangeBootOrder_OUTPUT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBootOrder", bootSource)
	ret0, _ := ret[0].(boot0.ChangeBootOrder_OUTPUT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBootOrder indicates an expected call of ChangeBootOrder.
func (mr *MockDeviceManagementMockRecorder) ChangeBootOrder(bootSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBootOrder", reflect.TypeOf((*MockDeviceManagement)(nil).ChangeBootOrder), bootSource)
}

// CreateAlarmOccurrences mocks base method.
func (m *MockDeviceManagement) CreateAlarmOccurrences(name string, startTime time.Time, interval int, deleteOnCompletion bool) (alarmclock.AddAlarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlarmOccurrences", name, startTime, interval, deleteOnCompletion)
	ret0, _ := ret[0].(alarmclock.AddAlarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlarmOccurrences indicates an expected call of CreateAlarmOccurrences.
func (mr *MockDeviceManagementMockRecorder) CreateAlarmOccurrences(name, startTime, interval, deleteOnCompletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlarmOccurrences", reflect.TypeOf((*MockDeviceManagement)(nil).CreateAlarmOccurrences), name, startTime, interval, deleteOnCompletion)
}

// DeleteAlarmOccurrences mocks base method.
func (m *MockDeviceManagement) DeleteAlarmOccurrences(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlarmOccurrences", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlarmOccurrences indicates an expected call of DeleteAlarmOccurrences.
func (mr *MockDeviceManagementMockRecorder) DeleteAlarmOccurrences(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmOccurrences", reflect.TypeOf((*MockDeviceManagement)(nil).DeleteAlarmOccurrences), instanceID)
}

// GetAMTVersion mocks base method.
func (m *MockDeviceManagement) GetAMTVersion() ([]software.SoftwareIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAMTVersion")
	ret0, _ := ret[0].([]software.SoftwareIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAMTVersion indicates an expected call of GetAMTVersion.
func (mr *MockDeviceManagementMockRecorder) GetAMTVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAMTVersion", reflect.TypeOf((*MockDeviceManagement)(nil).GetAMTVersion))
}

// GetAlarmOccurrences mocks base method.
func (m *MockDeviceManagement) GetAlarmOccurrences() ([]alarmclock0.AlarmClockOccurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmOccurrences")
	ret0, _ := ret[0].([]alarmclock0.AlarmClockOccurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmOccurrences indicates an expected call of GetAlarmOccurrences.
func (mr *MockDeviceManagementMockRecorder) GetAlarmOccurrences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmOccurrences", reflect.TypeOf((*MockDeviceManagement)(nil).GetAlarmOccurrences))
}

// GetAuditLog mocks base method.
func (m *MockDeviceManagement) GetAuditLog(startIndex int) (dto.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", startIndex)
	ret0, _ := ret[0].(dto.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockDeviceManagementMockRecorder) GetAuditLog(startIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockDeviceManagement)(nil).GetAuditLog), startIndex)
}

// GetBootData mocks base method.
func (m *MockDeviceManagement) GetBootData() (boot.BootCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootData")
	ret0, _ := ret[0].(boot.BootCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootData indicates an expected call of GetBootData.
func (mr *MockDeviceManagementMockRecorder) GetBootData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootData", reflect.TypeOf((*MockDeviceManagement)(nil).GetBootData))
}

// GetEventLog mocks base method.
func (m *MockDeviceManagement) GetEventLog() (messagelog.GetRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventLog")
	ret0, _ := ret[0].(messagelog.GetRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventLog indicates an expected call of GetEventLog.
func (mr *MockDeviceManagementMockRecorder) GetEventLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventLog", reflect.TypeOf((*MockDeviceManagement)(nil).GetEventLog))
}

// GetFeatures mocks base method.
func (m *MockDeviceManagement) GetFeatures() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatures")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatures indicates an expected call of GetFeatures.
func (mr *MockDeviceManagementMockRecorder) GetFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatures", reflect.TypeOf((*MockDeviceManagement)(nil).GetFeatures))
}

// GetGeneralSettings mocks base method.
func (m *MockDeviceManagement) GetGeneralSettings() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralSettings")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralSettings indicates an expected call of GetGeneralSettings.
func (mr *MockDeviceManagementMockRecorder) GetGeneralSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralSettings", reflect.TypeOf((*MockDeviceManagement)(nil).GetGeneralSettings))
}

// GetHardwareInfo mocks base method.
func (m *MockDeviceManagement) GetHardwareInfo() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareInfo")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareInfo indicates an expected call of GetHardwareInfo.
func (mr *MockDeviceManagementMockRecorder) GetHardwareInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareInfo", reflect.TypeOf((*MockDeviceManagement)(nil).GetHardwareInfo))
}

// GetPowerCapabilities mocks base method.
func (m *MockDeviceManagement) GetPowerCapabilities() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerCapabilities")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerCapabilities indicates an expected call of GetPowerCapabilities.
func (mr *MockDeviceManagementMockRecorder) GetPowerCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerCapabilities", reflect.TypeOf((*MockDeviceManagement)(nil).GetPowerCapabilities))
}

// GetPowerState mocks base method.
func (m *MockDeviceManagement) GetPowerState() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerState")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerState indicates an expected call of GetPowerState.
func (mr *MockDeviceManagementMockRecorder) GetPowerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerState", reflect.TypeOf((*MockDeviceManagement)(nil).GetPowerState))
}

// GetUserConsentCode mocks base method.
func (m *MockDeviceManagement) GetUserConsentCode() (optin.StartOptIn_OUTPUT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConsentCode")
	ret0, _ := ret[0].(optin.StartOptIn_OUTPUT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConsentCode indicates an expected call of GetUserConsentCode.
func (mr *MockDeviceManagementMockRecorder) GetUserConsentCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConsentCode", reflect.TypeOf((*MockDeviceManagement)(nil).GetUserConsentCode))
}

// RedirectClose mocks base method.
func (m *MockDeviceManagement) RedirectClose(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectClose", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectClose indicates an expected call of RedirectClose.
func (mr *MockDeviceManagementMockRecorder) RedirectClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectClose", reflect.TypeOf((*MockDeviceManagement)(nil).RedirectClose), ctx)
}

// RedirectConnect mocks base method.
func (m *MockDeviceManagement) RedirectConnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectConnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectConnect indicates an expected call of RedirectConnect.
func (mr *MockDeviceManagementMockRecorder) RedirectConnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectConnect", reflect.TypeOf((*MockDeviceManagement)(nil).RedirectConnect), ctx)
}

// RedirectListen mocks base method.
func (m *MockDeviceManagement) RedirectListen(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectListen", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedirectListen indicates an expected call of RedirectListen.
func (mr *MockDeviceManagementMockRecorder) RedirectListen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectListen", reflect.TypeOf((*MockDeviceManagement)(nil).RedirectListen), ctx)
}

// RedirectSend mocks base method.
func (m *MockDeviceManagement) RedirectSend(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectSend", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectSend indicates an expected call of RedirectSend.
func (mr *MockDeviceManagementMockRecorder) RedirectSend(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectSend", reflect.TypeOf((*MockDeviceManagement)(nil).RedirectSend), ctx, data)
}

// SendConsentCode mocks base method.
func (m *MockDeviceManagement) SendConsentCode(code int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsentCode", code)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendConsentCode indicates an expected call of SendConsentCode.
func (mr *MockDeviceManagementMockRecorder) SendConsentCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsentCode", reflect.TypeOf((*MockDeviceManagement)(nil).SendConsentCode), code)
}

// SendPowerAction mocks base method.
func (m *MockDeviceManagement) SendPowerAction(action int) (power.PowerActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPowerAction", action)
	ret0, _ := ret[0].(power.PowerActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPowerAction indicates an expected call of SendPowerAction.
func (mr *MockDeviceManagementMockRecorder) SendPowerAction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPowerAction", reflect.TypeOf((*MockDeviceManagement)(nil).SendPowerAction), action)
}

// SetBootConfigRole mocks base method.
func (m *MockDeviceManagement) SetBootConfigRole(role int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBootConfigRole", role)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBootConfigRole indicates an expected call of SetBootConfigRole.
func (mr *MockDeviceManagementMockRecorder) SetBootConfigRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootConfigRole", reflect.TypeOf((*MockDeviceManagement)(nil).SetBootConfigRole), role)
}

// SetBootData mocks base method.
func (m *MockDeviceManagement) SetBootData(data boot.BootSettingDataRequest) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBootData", data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBootData indicates an expected call of SetBootData.
func (mr *MockDeviceManagementMockRecorder) SetBootData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootData", reflect.TypeOf((*MockDeviceManagement)(nil).SetBootData), data)
}

// SetFeatures mocks base method.
func (m *MockDeviceManagement) SetFeatures(arg0 dto.Features) (dto.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeatures", arg0)
	ret0, _ := ret[0].(dto.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFeatures indicates an expected call of SetFeatures.
func (mr *MockDeviceManagementMockRecorder) SetFeatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeatures", reflect.TypeOf((*MockDeviceManagement)(nil).SetFeatures), arg0)
}

// SetupWsmanClient mocks base method.
func (m *MockDeviceManagement) SetupWsmanClient(device entity.Device, isRedirection, logAMTMessages bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupWsmanClient", device, isRedirection, logAMTMessages)
}

// SetupWsmanClient indicates an expected call of SetupWsmanClient.
func (mr *MockDeviceManagementMockRecorder) SetupWsmanClient(device, isRedirection, logAMTMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupWsmanClient", reflect.TypeOf((*MockDeviceManagement)(nil).SetupWsmanClient), device, isRedirection, logAMTMessages)
}

// MockIEEE8021xProfile is a mock of IEEE8021xProfile interface.
type MockIEEE8021xProfile struct {
	ctrl     *gomock.Controller
	recorder *MockIEEE8021xProfileMockRecorder
}

// MockIEEE8021xProfileMockRecorder is the mock recorder for MockIEEE8021xProfile.
type MockIEEE8021xProfileMockRecorder struct {
	mock *MockIEEE8021xProfile
}

// NewMockIEEE8021xProfile creates a new mock instance.
func NewMockIEEE8021xProfile(ctrl *gomock.Controller) *MockIEEE8021xProfile {
	mock := &MockIEEE8021xProfile{ctrl: ctrl}
	mock.recorder = &MockIEEE8021xProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEEE8021xProfile) EXPECT() *MockIEEE8021xProfileMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockIEEE8021xProfile) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockIEEE8021xProfileMockRecorder) CheckProfileExists(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockIEEE8021xProfile)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockIEEE8021xProfile) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIEEE8021xProfileMockRecorder) Delete(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEEE8021xProfile)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockIEEE8021xProfile) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEEE8021xProfileMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEEE8021xProfile)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockIEEE8021xProfile) GetByName(ctx context.Context, profileName, tenantID string) (entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIEEE8021xProfileMockRecorder) GetByName(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIEEE8021xProfile)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockIEEE8021xProfile) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockIEEE8021xProfileMockRecorder) GetCount(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIEEE8021xProfile)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockIEEE8021xProfile) Insert(ctx context.Context, p *entity.IEEE8021xConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIEEE8021xProfileMockRecorder) Insert(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEEE8021xProfile)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockIEEE8021xProfile) Update(ctx context.Context, p *entity.IEEE8021xConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEEE8021xProfileMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEEE8021xProfile)(nil).Update), ctx, p)
}

// MockCIRAConfig is a mock of CIRAConfig interface.
type MockCIRAConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCIRAConfigMockRecorder
}

// MockCIRAConfigMockRecorder is the mock recorder for MockCIRAConfig.
type MockCIRAConfigMockRecorder struct {
	mock *MockCIRAConfig
}

// NewMockCIRAConfig creates a new mock instance.
func NewMockCIRAConfig(ctrl *gomock.Controller) *MockCIRAConfig {
	mock := &MockCIRAConfig{ctrl: ctrl}
	mock.recorder = &MockCIRAConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIRAConfig) EXPECT() *MockCIRAConfigMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCIRAConfig) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCIRAConfigMockRecorder) Delete(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCIRAConfig)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockCIRAConfig) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCIRAConfigMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCIRAConfig)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockCIRAConfig) GetByName(ctx context.Context, configName, tenantID string) (entity.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, configName, tenantID)
	ret0, _ := ret[0].(entity.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCIRAConfigMockRecorder) GetByName(ctx, configName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCIRAConfig)(nil).GetByName), ctx, configName, tenantID)
}

// GetCount mocks base method.
func (m *MockCIRAConfig) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCIRAConfigMockRecorder) GetCount(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCIRAConfig)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockCIRAConfig) Insert(ctx context.Context, p *entity.CIRAConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCIRAConfigMockRecorder) Insert(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCIRAConfig)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockCIRAConfig) Update(ctx context.Context, p *entity.CIRAConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCIRAConfigMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCIRAConfig)(nil).Update), ctx, p)
}

// MockWirelessProfile is a mock of WirelessProfile interface.
type MockWirelessProfile struct {
	ctrl     *gomock.Controller
	recorder *MockWirelessProfileMockRecorder
}

// MockWirelessProfileMockRecorder is the mock recorder for MockWirelessProfile.
type MockWirelessProfileMockRecorder struct {
	mock *MockWirelessProfile
}

// NewMockWirelessProfile creates a new mock instance.
func NewMockWirelessProfile(ctrl *gomock.Controller) *MockWirelessProfile {
	mock := &MockWirelessProfile{ctrl: ctrl}
	mock.recorder = &MockWirelessProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWirelessProfile) EXPECT() *MockWirelessProfileMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockWirelessProfile) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockWirelessProfileMockRecorder) CheckProfileExists(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockWirelessProfile)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockWirelessProfile) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockWirelessProfileMockRecorder) Delete(ctx, profileName, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWirelessProfile)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockWirelessProfile) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.WirelessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.WirelessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWirelessProfileMockRecorder) Get(ctx, top, skip, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWirelessProfile)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockWirelessProfile) GetByName(ctx context.Context, guid, tenantID string) (entity.WirelessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, guid, tenantID)
	ret0, _ := ret[0].(entity.WirelessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockWirelessProfileMockRecorder) GetByName(ctx, guid, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockWirelessProfile)(nil).GetByName), ctx, guid, tenantID)
}

// GetCount mocks base method.
func (m *MockWirelessProfile) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockWirelessProfileMockRecorder) GetCount(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockWirelessProfile)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockWirelessProfile) Insert(ctx context.Context, p *entity.WirelessConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockWirelessProfileMockRecorder) Insert(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWirelessProfile)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockWirelessProfile) Update(ctx context.Context, p *entity.WirelessConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWirelessProfileMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWirelessProfile)(nil).Update), ctx, p)
}
